const userModel = require("../models/userModel");
const bcrypt = require('bcryptjs');
const { response } = require("express");
const jwt = require('jsonwebtoken')

const registerController = async (req,res)=>{
    try {
        const existingUser = await userModel.findOne({email:req.body.email})
        //validation
        if(existingUser)
        {
            return res.status(200).send({
                success : false,
                message : 'user already exists'
            })
        }
        //hashing password
        const salt = await bcrypt.genSalt(10) //more the value more processing it requires 
        const hashedPassword = await bcrypt.hash(req.body.password,salt)
        req.body.password = hashedPassword
        //rest data
        const user = new userModel(req.body)
        await user.save();
        return res.status(201).send({
            sucess: true,
            message : 'user registered successfully',
            user,
        });

    } catch (error) {
        console.log(error)
        req.status(500).send({
            success : false,
            message : 'error in register API',
            error 
        });
    }
};


// //login call back
// const loginController = async(req,res)=>{
//     try {
//         const user = await userModel.findOne({email:res.body.email})
//         if(!user){ //existingUser or user
//             return res.status(404).send({
//                 success:false,
//                 message:"user not found",
//             });
//         }
//         //comparing password if user found
//         const comparePassword = await bcrypt.compare(req.body.password,user.password)
//         if(!comparePassword)
//         {
//             return res.status(500).send({
//                 sucess:false,
//                 message:'invalid credentials'
//             });
//         }
//         //creating tooken 
//         const token = jwt.sign({userId:user._id},process.env.JWT_SECRET,{expiresIn:'1d'})
//         return res.status(200).send({
//             sucess:true,
//             message:'login successful',
//             token,
//             user,
//         });
//     } catch (error) {
//         console.log(error)
//         res.status(500).send({
//             success:false,
//             message:"error in login api",
//             error
//         });
//     }
// };



//login call back
const loginController = async (req, res) => {
    try {
      const user = await userModel.findOne({ email: req.body.email });
      if (!user) {
        return res.status(404).send({
          success: false,
          message: "Invalid Credentials",
        });
      }
      //check role
      if (user.role !== req.body.role) {
        return res.status(500).send({
          success: false,
          message: "role dosent match",
        });
      }
      //compare password
      const comparePassword = await bcrypt.compare(
        req.body.password,
        user.password
      );
      if (!comparePassword) {
        return res.status(500).send({
          success: false,
          message: "Invalid Credentials",
        });
      }
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
        expiresIn: "1d",
      });
      return res.status(200).send({
        success: true,
        message: "Login Successfully",
        token,
        user,
      });
    } catch (error) {
      console.log(error);
      res.status(500).send({
        success: false,
        message: "Error In Login API",
        error,
      });
    }
  };

module.exports = {registerController,loginController}
